{
    "cells": [
        {
            "language": "typescript",
            "source": [
                "//! Set State depending on previous State\r\n\r\nconst [userInput,setUserInput] = useState({\r\n    titleValue:'',\r\n    amountValue:'',\r\n    dateValue:''\r\n})\r\n\r\nsetUserInput(prevState => {\r\n    return {...prevState,titleValue:e.target.value}\r\n})\r\n\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "//! 3 Ways to useState()\r\n\r\nfunction handleChange(){\r\n        setDateValue(e.target.value)\r\n        setUserInput({\r\n            ...userInput,\r\n            dateValue:e.target.value,\r\n        })\r\n        setUserInput(prevState => {\r\n            return {...prevState,dateValue:e.target.value}\r\n         })\r\n}"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "//! Form Submission\r\n\r\nfunction handleSubmit(e){\r\n\r\n    e.preventDefault()\r\n\r\n    const expenseData = {\r\n        title:titleValue,\r\n        amount:amountValue,\r\n        date:new Date(dateValue)\r\n    }\r\n    console.log(expenseData);        \r\n}\r\n\r\n<form onSubmit={handleSubmit}></form>"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "//! Two Way Binding\r\n\r\n<input type='text' value={titleValue} onChange={titleChangeHandler}/>"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "//! Pass DATA from Child to Parent\r\n\r\n//? From Here\r\n\r\n\r\n\r\nimport React, {useState} from 'react'\r\nimport './ExpenseForm.css'\r\n\r\nexport default function ExpenseForm(props) {\r\n\r\n    const [titleValue,setTitleValue] = useState('');\r\n    const [amountValue,setAmountValue] = useState('');\r\n    const [dateValue,setDateValue] = useState('');\r\n\r\n    function titleChangeHandler(e){\r\n        setTitleValue(e.target.value)\r\n    }\r\n    \r\n    function amountChangeHandler(e){\r\n        setAmountValue(e.target.value)\r\n    }  \r\n\r\n    function dateChangeHandler(e){\r\n        setDateValue(e.target.value)\r\n    }  \r\n\r\n    function handleSubmit(e){\r\n\r\n        e.preventDefault()\r\n\r\n        const expenseData = {\r\n            title:titleValue,\r\n            amount:amountValue,\r\n            date:new Date(dateValue)\r\n        }\r\n        props.onSaveExpenseData(expenseData);\r\n        setTitleValue('')\r\n        setAmountValue('')\r\n        setDateValue('')\r\n    }\r\n    \r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n        <div className='new-expense__controls'>\r\n            <div className='new-expense__control'>\r\n                <label>Title</label>\r\n                <input type='text' value={titleValue} onChange={titleChangeHandler}/>\r\n            </div>\r\n            <div className='new-expense__control'>\r\n                <label>Amount</label>\r\n                <input type='number' value={amountValue} min=\"0.01\" step=\"0.01\" onChange={amountChangeHandler}/>\r\n            </div>\r\n            <div className='new-expense__control'>\r\n                <label>Date</label>\r\n                <input type='date' value={dateValue} min=\"2019-01-01\" max=\"2022-12-31\" onChange={dateChangeHandler}/>\r\n            </div>\r\n        </div>\r\n        <div className='new-expense__actions'>\r\n            <button type='submit'>Add Expense</button>\r\n        </div>\r\n    </form>\r\n  )\r\n}\r\n\r\n//? To Here\r\nexport default function NewExpense() {\r\n\r\n    function saveExpenseHandler(enteredExpenseData){\r\n      const expenseData = {\r\n        ...enteredExpenseData,\r\n        id: Math.random().toString()\r\n      }\r\n      console.log(expenseData)\r\n    }  \r\n  \r\n    return (\r\n      <div className='new-expense'>\r\n         <ExpenseForm onSaveExpenseData={saveExpenseHandler}/>\r\n      </div>\r\n    )\r\n  }"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "//! Wrapper Component instead of default div\r\n\r\nimport React from 'react'\r\n\r\nfunction Wrapper(props) {\r\n   return props.children;\r\n}\r\n\r\n\r\nexport default Wrapper;"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "//! React Portals && Fragment\r\nimport React,{Fragment} from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\n//? public/index.html\r\n    // <div id=\"backdrop-root\"></div>\r\n    // <div id=\"overlay-root\"></div>\r\n    // <div id=\"root\"></div>\r\n//?\r\n<Fragment>\r\n         {ReactDOM.createPortal(<Backdrop onConfirm={props.onConfirm}/>,document.getElementById('backdrop-root'))}\r\n         {ReactDOM.createPortal(<ModalOverlay title={props.title} message={props.message} onConfirm={props.onConfirm}/>,document.getElementById('overlay-root'))}\r\n</Fragment>\r\n\r\n//* DUCE COMPONENTUL IN DIV-UL SELECTAT"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "//! React useRef()\r\n\r\nimport React,{useRef} from 'react'\r\n\r\nconst nameInputRef = useRef();\r\nconst ageInputRef = useRef();\r\n\r\nconsole.log(nameInputRef.current); //? returneaza elemntul html <input type=\"text\" value></input>\r\nconsole.log(nameInputRef.current.value); //? returneaza valoarea din input\r\n\r\n<>\r\n    <input ref={nameInputRef} id='username' type='text' value={username} onChange={usernameHandler}></input>\r\n    <input ref={ageInputRef} id='age' type='number' value={age} onChange={ageHandler}></input>\r\n</>"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "<>\r\n    <input ref={nameInputRef}  onChange={usernameHandler}></input> //* Uncontrolled Input (no value)\r\n    <input ref={ageInputRef} value={age} onChange={ageHandler}></input> //* Controlled Input (has value)\r\n</>"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "//! useEffect HOOK\r\n\r\n  useEffect(() => {\r\n    const storedUserInfo = localStorage.getItem('isLoggedIn')\r\n    if(storedUserInfo === '1'){\r\n      setIsLoggedIn(true)\r\n    }\r\n  },[])\r\n\r\n//? runs just one time when the app starts because the dependescies cannot change after because they are empty\r\n//!  [] - dependencies\r\n\r\n\r\nuseEffect(() => {\r\n  setFormIsValid(\r\n    enteredEmail.includes('@') && enteredPassword.trim().length > 6\r\n  );\r\n},[enteredEmail,enteredPassword])\r\n\r\n//? runs when one or both change\r\n//! [enteredEmail,enteredPassword] - dependencies"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "//! Local Storage\r\n\r\nuseEffect(() => {\r\n  const storedTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY))\r\n  if (storedTodos) setTodos(storedTodos)\r\n}, [])\r\n\r\nuseEffect(() => {\r\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos))\r\n}, [todos])"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "//! useEffect Cleanup\r\n\r\n\r\nuseEffect(() => {\r\n    const id = setTimeout(() => {\r\n      setFormIsValid(\r\n        enteredEmail.includes('@') && enteredPassword.trim().length > 6\r\n      );\r\n    },500);\r\n    return () => {\r\n      console.log('Cleanup');\r\n      clearTimeout(id)\r\n    }\r\n  },[enteredEmail,enteredPassword])"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "//! useReducer\r\n\r\nconst [emailState,dispatchEmail] = useReducer(emailReducer,{\r\n    value: '',\r\n    isValid: false\r\n  })\r\n\r\n  const [passwordState,dispatchPassword] = useReducer(passwordReducer,{\r\n    value: '',\r\n    isValid: false\r\n  })\r\n\r\n  const EMAIL_ACTIONS = {\r\n    USER_INPUT: 'USER_INPUT',\r\n    INPUT_BLUR: 'INPUT_BLUR'\r\n  }\r\n  \r\n  const PASSWORD_ACTIONS = {\r\n    USER_INPUT: 'USER_INPUT',\r\n    INPUT_BLUR: 'INPUT_BLUR'\r\n  }\r\n  \r\n  const emailReducer = (state,action) => {\r\n    if(action.type === EMAIL_ACTIONS.USER_INPUT){\r\n      return {value: action.payload ,isValid: action.payload.includes('@')}\r\n    }\r\n    if(action.type === EMAIL_ACTIONS.INPUT_BLUR){\r\n      return {value: state.value ,isValid: state.value.includes('@')}\r\n    }\r\n    return {value: '' ,isValid: false}\r\n  }\r\n  \r\n  const passwordReducer = (state,action) => {\r\n    switch(action.type){\r\n      case PASSWORD_ACTIONS.USER_INPUT:\r\n        return {value: action.payload ,isValid: action.payload.trim().length > 6}\r\n      case PASSWORD_ACTIONS.INPUT_BLUR:\r\n        return {value: state.value ,isValid: state.value.trim().length > 6}\r\n      default:\r\n        return state;    \r\n    }\r\n  }\r\n\r\n  const emailChangeHandler = (event) => {\r\n    //setEnteredEmail(event.target.value);\r\n\r\n    dispatchEmail({\r\n      type: 'USER_INPUT',\r\n      payload: event.target.value\r\n    })\r\n    \r\n    // setFormIsValid(\r\n    //   event.target.value.includes('@') && passwordState.isValid\r\n    // );\r\n  };\r\n\r\n  const passwordChangeHandler = (event) => {\r\n    //setEnteredPassword(event.target.value);\r\n\r\n     dispatchPassword({\r\n       type: PASSWORD_ACTIONS.USER_INPUT,\r\n       payload: event.target.value\r\n     }) \r\n\r\n    // setFormIsValid(\r\n    //   emailState.isValid && passwordState.isValid\r\n    // );\r\n\r\n  };\r\n\r\n  const validateEmailHandler = () => {\r\n    // setEmailIsValid(emailState.isValid);\r\n    dispatchEmail({\r\n      type: 'INPUT_BLUR'\r\n    })\r\n  };\r\n\r\n  const validatePasswordHandler = () => {\r\n    //setPasswordIsValid(enteredPassword.trim().length > 6);\r\n    dispatchPassword({\r\n      type: PASSWORD_ACTIONS.INPUT_BLUR\r\n    })\r\n  };"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "//! useContext\r\n\r\n//? App.js\r\n\r\nreturn (\r\n    <React.Fragment>\r\n      <AuthContext.Provider value={{isLoggedIn: isLoggedIn}}>\r\n        <MainHeader  onLogout={logoutHandler} />\r\n        <main>\r\n          {!isLoggedIn && <Login onLogin={loginHandler} />}\r\n          {isLoggedIn && <Home onLogout={logoutHandler} />}\r\n        </main>\r\n      </AuthContext.Provider>\r\n    </React.Fragment>\r\n  );\r\n\r\n//? Navigation.js\r\n\r\nconst ctx = useContext(AuthContext)\r\n\r\nreturn (\r\n  <nav className={classes.nav}>\r\n    <ul>\r\n      {ctx.isLoggedIn && (\r\n        <li>\r\n          <a href=\"/\">Users</a>\r\n        </li>\r\n      )}\r\n      {ctx.isLoggedIn && (\r\n        <li>\r\n          <a href=\"/\">Admin</a>\r\n        </li>\r\n      )}\r\n      {ctx.isLoggedIn && (\r\n        <li>\r\n          <button onClick={props.onLogout}>Logout</button>\r\n        </li>\r\n      )}\r\n    </ul>\r\n  </nav>\r\n)\r\n\r\n//? store/auth-context.js\r\n\r\nimport React from 'react'\r\n\r\nconst AuthContext = React.createContext({\r\n    isLoggedIn: false\r\n});\r\n\r\nexport default AuthContext;\r\n\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "//! Forward Refs\r\n\r\n//? Login.js\r\n\r\nconst submitHandler = (event) => {\r\n    event.preventDefault();\r\n    if(formIsValid){\r\n      ctx.onLogin(emailState.value, passwordState.value);\r\n    }else if(!emailIsValid){\r\n      emailInputRef.current.focus()\r\n    }else{\r\n      passwordInputRef.current.focus()\r\n    }\r\n  };\r\n\r\n  <Input\r\n          className={`${classes.control} ${\r\n            emailState.isValid === false ? classes.invalid : ''\r\n          }`}\r\n          ref={emailInputRef}\r\n          labelText='Email'\r\n          htmlFor=\"email\"\r\n          id='email'\r\n          value={emailState.value}\r\n          onChange={emailChangeHandler}\r\n          onBlur={validateEmailHandler}\r\n       />\r\n\r\n//? Input.js\r\n\r\n\r\nconst inputRef = useRef()\r\n\r\nconst activate = () => {\r\n  inputRef.current.focus()\r\n}\r\n\r\nuseImperativeHandle(ref, () => {\r\n  return {\r\n    focus: activate\r\n  }\r\n})\r\n\r\nreturn (\r\n    <div className={props.className}>\r\n       <label htmlFor={props.htmlFor}>{props.labelText}</label>\r\n          <input\r\n            ref={inputRef}\r\n            type={props.type}\r\n            id={props.id}\r\n            value={props.value}\r\n            onChange={props.onChange}\r\n            onBlur={props.onBlur}\r\n          />\r\n    </div>"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "//! React MEMO \r\nimport React from 'react'\r\n\r\nfunction Button(props) {\r\n  console.log('Button Running');\r\n  return (\r\n    <button onClick={props.onClick}>{props.children}</button>\r\n  )\r\n}\r\n\r\nexport default React.memo(Button)"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "//! useCallback\r\n\r\nimport React, { useState, useCallback } from 'react';\r\nimport Demo from './components/UI/Button/Demo';\r\nimport Button from './components/Button';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\r\n  const [isVisible,setIsVisible] = useState(false)\r\n  const [allow,setAllow] = useState(false); \r\n\r\n  const clickHandler = useCallback(() => {\r\n    if(allow){\r\n      setIsVisible(prev => !prev); \r\n      console.log('LOL');\r\n    }\r\n  },[allow]);\r\n\r\n  const allowHandler = () => {\r\n    setAllow(true)\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Demo show={isVisible}/>\r\n      <Button onClick={allowHandler}>Allow Toggling</Button>\r\n      <Button onClick={clickHandler}>Toggle Paragraph</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "//! useMemo\r\n\r\n//? App.js\r\n\r\nlet arr = useMemo(() => {\r\n    return [1,6,23,99,16];\r\n  },[])\r\n\r\nreturn (\r\n    <div className=\"app\">\r\n      <Demo show={isVisible}/>\r\n      <DemoList title={listTitle} items={arr} />\r\n      <Button onClick={allowHandler}>Allow Toggling</Button>\r\n      <Button onClick={clickHandler}>Toggle Paragraph</Button>\r\n      <Button onClick={changeTitleHandler}>Change Title</Button>\r\n    </div>\r\n  );\r\n\r\n  //? DemoList.js\r\n\r\n  import React, { useMemo } from 'react'\r\n\r\nfunction DemoList(props) {\r\n\r\n  const sortedArr = useMemo (() => {\r\n      console.log('Items Sorted');\r\n      return  props.items.sort((a,b) => a-b)  \r\n  },[props.items])\r\n\r\n  console.log('DemoListRunning');\r\n\r\n  return (\r\n    <div>\r\n      <p>{props.title}</p>\r\n      <ul>\r\n         {\r\n            sortedArr.map(item => {\r\n                return <li key={item}>{item}</li>\r\n            })\r\n         }\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default React.memo(DemoList)\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "//! REDUX\r\n\r\n//? store/index.js\r\n\r\nimport { createStore } from 'redux'\r\n\r\nconst counterReducer = (state = {counter : 0}, action) => {\r\n    if(action.type === 'increment'){\r\n        return {\r\n            counter: state.counter + 1\r\n        }\r\n    }\r\n    if(action.type === 'decrement'){\r\n        return {\r\n            counter: state.counter - action.value\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\nconst store = createStore(counterReducer);\r\n\r\nexport default store;\r\n\r\n// store.dispatch({type: 'increment'})\r\n// store.dispatch({type: 'decrement'})\r\n\r\n//? USAGE\r\n\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport classes from './Counter.module.css';\r\n\r\nconst Counter = () => {\r\n\r\n  const counterValue = useSelector(state => state.counter);\r\n  const dispatch = useDispatch();\r\n\r\n  const toggleCounterHandler = () => {};\r\n\r\n  const incrementHandler = () =>{\r\n    dispatch({type: 'increment'})\r\n  }\r\n\r\n  const decrementHandler = () =>{\r\n    dispatch({type: 'decrement',value: 2}) //!PAYLOAD\r\n  }\r\n\r\n  return (\r\n    <main className={classes.counter}>\r\n      <h1>Redux Counter</h1>\r\n      <div className={classes.value}>{counterValue}</div>\r\n      <button onClick={toggleCounterHandler}>Toggle Counter</button>\r\n      <div>\r\n        <button onClick={incrementHandler}>Increment</button>\r\n        <button onClick={decrementHandler}>Decrement</button>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Counter;\r\n\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "//! Redux Slice\r\n\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialAuthState = {\r\n    isAuthenticated: false\r\n}\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialAuthState,\r\n    reducers: {\r\n        login(state){\r\n            state.isAuthenticated = true;\r\n        },\r\n        logout(state){\r\n            state.isAuthenticated = false;\r\n        }\r\n    }\r\n})\r\n\r\nexport const authActions = authSlice.actions;\r\nexport default authSlice;"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "//! Combine Reducers\r\n\r\nimport { configureStore } from '@reduxjs/toolkit';\r\n\r\nimport authSlice from './auth';\r\nimport counterSlice from './counter';\r\n\r\nconst store = configureStore({\r\n    reducer: {counter: counterSlice.reducer, auth: authSlice.reducer}\r\n})\r\n\r\nexport default store;\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "//! Use data\r\n\r\nimport classes from './Header.module.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { authActions } from '../store/auth';\r\n\r\nconst Header = () => {\r\n\r\n  const isAuthenticated = useSelector(state => state.auth.isAuthenticated)\r\n  const dispatch = useDispatch();\r\n\r\n  function logoutHandler(){\r\n    dispatch(authActions.logout())\r\n  }\r\n\r\n  return (\r\n    <header className={classes.header}>\r\n      <h1>Redux Auth</h1>\r\n      <nav>\r\n        <ul>\r\n          <li>\r\n            <a href='/'>My Products</a>\r\n          </li>\r\n          <li>\r\n            <a href='/'>My Sales</a>\r\n          </li>\r\n          {isAuthenticated && <li>\r\n            <button onClick={logoutHandler}>Logout</button>\r\n          </li>}\r\n        </ul>\r\n      </nav>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n"
            ],
            "outputs": []
        }
    ]
}